// Auto-generated from test.js
export const testCodeString = "\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MegaCloud = MegaCloud;\r\n/**\r\n * MegaCloud extractor function\r\n * @param ctx ExtractorContext containing axios, load, USER_AGENT, and logger\r\n * @returns Object with extract method implementing IVideoExtractor interface\r\n */\r\nfunction MegaCloud(ctx) {\r\n    const serverName = 'MegaCloud';\r\n    const sources = [];\r\n    const { axios, load, USER_AGENT, URL } = ctx;\r\n    /**\r\n     * Thanks to https://github.com/yogesh-hacker for the original implementation.\r\n     */\r\n    function getSources(embed_url, site) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            var _a, _b;\r\n            const regex = /\\/([^/?]+)(?=\\?)/;\r\n            const xrax = (_a = embed_url.toString().match(regex)) === null || _a === void 0 ? void 0 : _a[1];\r\n            const basePath = embed_url.pathname.split('/').slice(0, 4).join('/');\r\n            const url = `${embed_url.origin}${basePath}/getSources?id=${xrax}}`;\r\n            const getKeyType = url.includes('mega') ? 'mega' : url.includes('videostr') ? 'vidstr' : 'rabbit';\r\n            // console.log(`🔗 Fetching sources from: ${url} with key type: ${getKeyType}`);\r\n            //gets the base64 encoded string from the URL and key in parallel\r\n            let key;\r\n            const headers = {\r\n                'Accept': '*/*',\r\n                'X-Requested-With': 'XMLHttpRequest',\r\n                'Referer': site,\r\n                'User-Agent': USER_AGENT,\r\n            };\r\n            try {\r\n                const { data: keyData } = yield axios.get('https://raw.githubusercontent.com/yogesh-hacker/MegacloudKeys/refs/heads/main/keys.json');\r\n                key = keyData;\r\n            }\r\n            catch (err) {\r\n                console.error('❌ Error fetching key:', err);\r\n                return;\r\n            }\r\n            // console.log(`🔗 Fetched data: ${key[getKeyType]}`);\r\n            let videoTag;\r\n            let embedRes;\r\n            try {\r\n                embedRes = yield axios.get(embed_url.href, { headers });\r\n                const $ = load(embedRes.data);\r\n                videoTag = $('#megacloud-player');\r\n            }\r\n            catch (error) {\r\n                console.error('❌ Error fetching embed URL:', error);\r\n                return;\r\n            }\r\n            if (!videoTag.length) {\r\n                console.error('❌ Looks like URL expired!');\r\n                return;\r\n            }\r\n            const rawText = embedRes.data;\r\n            let nonceMatch = rawText.match(/\\b[a-zA-Z0-9]{48}\\b/);\r\n            if (!nonceMatch) {\r\n                const altMatch = rawText.match(/\\b([a-zA-Z0-9]{16})\\b.*?\\b([a-zA-Z0-9]{16})\\b.*?\\b([a-zA-Z0-9]{16})\\b/);\r\n                if (altMatch)\r\n                    nonceMatch = [altMatch.slice(1).join('')];\r\n            }\r\n            const nonce = nonceMatch === null || nonceMatch === void 0 ? void 0 : nonceMatch[0];\r\n            if (!nonce)\r\n                return console.error('❌ Nonce not found!');\r\n            const fileId = videoTag.attr('data-id');\r\n            const { data: encryptedResData } = yield axios.get(`${embed_url.origin}${basePath}/getSources?id=${fileId}&_k=${nonce}`, {\r\n                headers,\r\n            });\r\n            // console.log(\r\n            //   `🔗 Encrypted response:`,\r\n            //   encryptedResData,\r\n            //   `${embed_url.origin}${basePath}/getSources?id=${xrax}&_k=${nonce}`\r\n            // );\r\n            const encrypted = encryptedResData.encrypted;\r\n            const sources = encryptedResData.sources;\r\n            let videoSrc = [];\r\n            if (encrypted) {\r\n                const decodeUrl = 'https://script.google.com/macros/s/AKfycbxHbYHbrGMXYD2-bC-C43D3njIbU-wGiYQuJL61H4vyy6YVXkybMNNEPJNPPuZrD1gRVA/exec';\r\n                const params = new URLSearchParams({\r\n                    encrypted_data: sources,\r\n                    nonce: nonce,\r\n                    secret: key[getKeyType],\r\n                });\r\n                const decodeRes = yield axios.get(`${decodeUrl}?${params.toString()}`);\r\n                videoSrc = JSON.parse((_b = decodeRes.data.replace(/\\n/g, ' ').match(/\\[.*?\\]/)) === null || _b === void 0 ? void 0 : _b[0]);\r\n                // console.log(`🔗 Video URL: ${videoUrl}`, decodeRes.data.match(/\"file\":\"(.*?)\"/));\r\n            }\r\n            else {\r\n                videoSrc = sources;\r\n            }\r\n            return {\r\n                sources: videoSrc,\r\n                tracks: encryptedResData.tracks,\r\n                intro: encryptedResData === null || encryptedResData === void 0 ? void 0 : encryptedResData.intro,\r\n                outro: encryptedResData === null || encryptedResData === void 0 ? void 0 : encryptedResData.outro,\r\n            };\r\n        });\r\n    }\r\n    const extract = (embedIframeURL_1, ...args_1) => __awaiter(this, [embedIframeURL_1, ...args_1], void 0, function* (embedIframeURL, referer = 'https://hianime.to') {\r\n        var _a, _b, _c, _d;\r\n        const extractedData = {\r\n            subtitles: [],\r\n            intro: { start: 0, end: 0 },\r\n            outro: { start: 0, end: 0 },\r\n            sources: [],\r\n        };\r\n        // console.log(ctx);\r\n        try {\r\n            const resp = yield getSources(embedIframeURL, referer);\r\n            if (!resp)\r\n                return extractedData;\r\n            if (Array.isArray(resp.sources)) {\r\n                extractedData.sources = resp.sources.map((s) => ({\r\n                    url: s.file,\r\n                    isM3U8: s.type === 'hls',\r\n                    type: s.type,\r\n                }));\r\n            }\r\n            extractedData.intro = resp.intro ? resp.intro : extractedData.intro;\r\n            extractedData.outro = resp.outro ? resp.outro : extractedData.outro;\r\n            extractedData.subtitles = resp.tracks.map((track) => ({\r\n                url: track.file,\r\n                lang: track.label ? track.label : track.kind,\r\n            }));\r\n            extractedData.intro = (_a = resp.intro) !== null && _a !== void 0 ? _a : extractedData.intro;\r\n            extractedData.outro = (_b = resp.outro) !== null && _b !== void 0 ? _b : extractedData.outro;\r\n            extractedData.subtitles =\r\n                (_d = (_c = resp.tracks) === null || _c === void 0 ? void 0 : _c.map((track) => ({\r\n                    url: track.file,\r\n                    lang: track.label || track.kind,\r\n                }))) !== null && _d !== void 0 ? _d : [];\r\n            // console.log(`[MegaCloud] Extracted ${extractedData.sources.length} source(s)`);\r\n            return extractedData;\r\n        }\r\n        catch (err) {\r\n            // console.error('[MegaCloud] Extraction error', err);\r\n            throw err;\r\n        }\r\n    });\r\n    return {\r\n        serverName,\r\n        sources,\r\n        extract,\r\n    };\r\n}\r\n\r\n//# sourceMappingURL=megacloud.js.map";

export default testCodeString;

// CommonJS compatibility  
module.exports = { testCodeString };