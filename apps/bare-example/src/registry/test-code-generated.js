// Auto-generated from test.js
export const testCodeString = "\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MegaCloud = MegaCloud;\n/**\n * MegaCloud extractor function\n * @param ctx ExtractorContext containing axios, load, USER_AGENT\n * @returns Object with extract method implementing IVideoExtractor interface\n */\nfunction MegaCloud(ctx) {\n    const serverName = 'MegaCloud';\n    const sources = [];\n    const { axios, load, USER_AGENT, PolyURL } = ctx;\n    /**\n     * Thanks to https://github.com/yogesh-hacker for the original implementation.\n     */\n    function getSources(embed_url, site) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            const regex = /\\/([^/?]+)(?=\\?)/;\n            const xrax = (_a = embed_url.toString().match(regex)) === null || _a === void 0 ? void 0 : _a[1];\n            const basePath = embed_url.pathname.split('/').slice(0, 4).join('/');\n            const url = `${embed_url.origin}${basePath}/getSources?id=${xrax}}`;\n            const getKeyType = url.includes('mega') ? 'mega' : url.includes('videostr') ? 'vidstr' : 'rabbit';\n            // console.log(`🔗 Fetching sources from: ${url} with key type: ${getKeyType}`);\n            //gets the base64 encoded string from the URL and key in parallel\n            let key;\n            const headers = {\n                'Accept': '*/*',\n                'X-Requested-With': 'XMLHttpRequest',\n                'Referer': site,\n                'User-Agent': USER_AGENT,\n            };\n            try {\n                const { data: keyData } = yield (axios === null || axios === void 0 ? void 0 : axios.get('https://raw.githubusercontent.com/yogesh-hacker/MegacloudKeys/refs/heads/main/keys.json'));\n                key = keyData;\n            }\n            catch (err) {\n                console.error('❌ Error fetching key:', err);\n                return;\n            }\n            // console.log(`🔗 Fetched data: ${key[getKeyType]}`);\n            let videoTag;\n            let embedRes;\n            try {\n                embedRes = yield (axios === null || axios === void 0 ? void 0 : axios.get(embed_url.href, { headers }));\n                const $ = load(embedRes.data);\n                videoTag = $('#megacloud-player');\n            }\n            catch (error) {\n                console.error('❌ Error fetching embed URL:', error);\n                return;\n            }\n            if (!videoTag.length) {\n                console.error('❌ Looks like URL expired!');\n                return;\n            }\n            const rawText = embedRes.data;\n            let nonceMatch = rawText.match(/\\b[a-zA-Z0-9]{48}\\b/);\n            if (!nonceMatch) {\n                const altMatch = rawText.match(/\\b([a-zA-Z0-9]{16})\\b.*?\\b([a-zA-Z0-9]{16})\\b.*?\\b([a-zA-Z0-9]{16})\\b/);\n                if (altMatch)\n                    nonceMatch = [altMatch.slice(1).join('')];\n            }\n            const nonce = nonceMatch === null || nonceMatch === void 0 ? void 0 : nonceMatch[0];\n            if (!nonce)\n                return console.error('❌ Nonce not found!');\n            const fileId = videoTag.attr('data-id');\n            const { data: encryptedResData } = yield axios.get(`${embed_url.origin}${basePath}/getSources?id=${fileId}&_k=${nonce}`, {\n                headers,\n            });\n            // console.log(\n            //   `🔗 Encrypted response:`,\n            //   encryptedResData,\n            //   `${embed_url.origin}${basePath}/getSources?id=${xrax}&_k=${nonce}`\n            // );\n            const encrypted = encryptedResData.encrypted;\n            const sources = encryptedResData.sources;\n            let videoSrc = [];\n            if (encrypted) {\n                const decodeUrl = 'https://script.google.com/macros/s/AKfycbxHbYHbrGMXYD2-bC-C43D3njIbU-wGiYQuJL61H4vyy6YVXkybMNNEPJNPPuZrD1gRVA/exec';\n                const params = new URLSearchParams({\n                    encrypted_data: sources,\n                    nonce: nonce,\n                    secret: key[getKeyType],\n                });\n                const decodeRes = yield axios.get(`${decodeUrl}?${params.toString()}`);\n                videoSrc = JSON.parse((_b = decodeRes.data.replace(/\\n/g, ' ').match(/\\\\\\[.*?\\\\\\\\]/)) === null || _b === void 0 ? void 0 : _b[0]);\n                // console.log(`🔗 Video URL: ${videoUrl}`, decodeRes.data.match(/\"file\":\"(.*?)\"/));\n            }\n            else {\n                videoSrc = sources;\n            }\n            return {\n                sources: videoSrc,\n                tracks: encryptedResData.tracks,\n                intro: encryptedResData === null || encryptedResData === void 0 ? void 0 : encryptedResData.intro,\n                outro: encryptedResData === null || encryptedResData === void 0 ? void 0 : encryptedResData.outro,\n            };\n        });\n    }\n    // @ts-ignore\n    const extract = (embedIframeURL_1, ...args_1) => __awaiter(this, [embedIframeURL_1, ...args_1], void 0, function* (embedIframeURL, referer = 'https://hianime.to') {\n        var _a, _b, _c, _d;\n        const extractedData = {\n            subtitles: [],\n            intro: { start: 0, end: 0 },\n            outro: { start: 0, end: 0 },\n            sources: [],\n        };\n        // console.log(ctx);\n        try {\n            const resp = yield getSources(embedIframeURL, referer);\n            if (!resp)\n                return extractedData;\n            if (Array.isArray(resp.sources)) {\n                extractedData.sources = resp.sources.map((s) => ({\n                    url: s.file,\n                    isM3U8: s.type === 'hls',\n                    type: s.type,\n                }));\n            }\n            extractedData.intro = resp.intro ? resp.intro : extractedData.intro;\n            extractedData.outro = resp.outro ? resp.outro : extractedData.outro;\n            extractedData.subtitles = resp.tracks.map((track) => ({\n                url: track.file,\n                lang: track.label ? track.label : track.kind,\n            }));\n            extractedData.intro = (_a = resp.intro) !== null && _a !== void 0 ? _a : extractedData.intro;\n            extractedData.outro = (_b = resp.outro) !== null && _b !== void 0 ? _b : extractedData.outro;\n            extractedData.subtitles =\n                (_d = (_c = resp.tracks) === null || _c === void 0 ? void 0 : _c.map((track) => ({\n                    url: track.file,\n                    lang: track.label || track.kind,\n                }))) !== null && _d !== void 0 ? _d : [];\n            // console.log(`[MegaCloud] Extracted ${extractedData.sources.length} source(s)`);\n            return extractedData;\n        }\n        catch (err) {\n            // console.error('[MegaCloud] Extraction error', err);\n            throw err;\n        }\n    });\n    return {\n        serverName,\n        sources,\n        extract,\n    };\n}\n//# sourceMappingURL=megacloud.js.map";

export default testCodeString;

// CommonJS compatibility  
module.exports = { testCodeString };