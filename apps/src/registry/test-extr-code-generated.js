// Auto-generated from test.js
export const testCodeString =
  "\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MegaUp = MegaUp;\nconst axios_1 = __importDefault(require(\"axios\"));\n/**\n * MegaUp extractor factory that relies on the shared extractor context\n */\nfunction MegaUp(ctx) {\n    var _a;\n    const serverName = 'MegaUp';\n    const sources = [];\n    const apiBase = 'https://enc-dec.app/api';\n    const client = (_a = ctx.axios) !== null && _a !== void 0 ? _a : axios_1.default;\n    const userAgent = ctx.USER_AGENT ||\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36';\n    const decodeSources = (payload) => __awaiter(this, void 0, void 0, function* () {\n        try {\n            const { data } = yield client.post(`${apiBase}/dec-mega`, {\n                text: payload,\n                agent: userAgent,\n            }, { headers: { 'Content-Type': 'application/json' } });\n            return data.result;\n        }\n        catch (error) {\n            throw new Error(error.message);\n        }\n    });\n    const extract = (videoUrl) => __awaiter(this, void 0, void 0, function* () {\n        try {\n            const mediaUrl = videoUrl.href.replace('/e/', '/media/');\n            const { data } = yield client.get(mediaUrl, {\n                headers: {\n                    'Connection': 'keep-alive',\n                    'User-Agent': userAgent,\n                },\n            });\n            const decrypted = yield decodeSources(data.result);\n            return {\n                sources: decrypted.sources.map((source) => ({\n                    url: source.file,\n                    isM3U8: source.file.includes('.m3u8') || source.file.endsWith('m3u8'),\n                })),\n                subtitles: decrypted.tracks.map((track) => ({\n                    kind: track.kind,\n                    url: track.file,\n                    lang: track.label || 'English',\n                })),\n                download: decrypted.download,\n            };\n        }\n        catch (error) {\n            throw new Error(error.message);\n        }\n    });\n    return {\n        serverName,\n        sources,\n        extract,\n    };\n}\nexports.default = MegaUp;\n//# sourceMappingURL=megaup.js.map";

export default testCodeString;

// CommonJS compatibility
module.exports = { testCodeString };
