// Auto-generated from test.js
export const testCodeString =
  "\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Kwik = Kwik;\n/**\n * Kwik extractor function\n * @param ctx ExtractorContext containing axios, load, USER_AGENT\n * @returns Object with extract method implementing IVideoExtractor interface\n */\nfunction Kwik(ctx) {\n    const serverName = 'kwik';\n    const sources = [];\n    const { axios, load, USER_AGENT, PolyURL } = ctx;\n    function unPack(code) {\n        function indent(code) {\n            try {\n                let tabs = 0, old = -1, add = '';\n                for (let i = 0; i < code.length; i++) {\n                    if (code[i].includes('{'))\n                        tabs++;\n                    if (code[i].includes('}'))\n                        tabs--;\n                    if (old !== tabs) {\n                        old = tabs;\n                        add = '';\n                        while (old > 0) {\n                            add += '\\t';\n                            old--;\n                        }\n                        old = tabs;\n                    }\n                    code[i] = add + code[i];\n                }\n            }\n            finally {\n                // let GC cleanup\n            }\n            return code;\n        }\n        let captured = '';\n        // fake environment\n        const env = {\n            eval: function (c) {\n                captured = c;\n            },\n            window: {},\n            document: {},\n        };\n        // Instead of `with`, run inside a Function with env injected\n        const runner = new Function('env', `\n    const { eval, window, document } = env;\n    ${code}\n  `);\n        runner(env);\n        // prettify captured code\n        captured = (captured + '')\n            .replace(/;/g, ';\\n')\n            .replace(/{/g, '\\n{\\n')\n            .replace(/}/g, '\\n}\\n')\n            .replace(/\\n;\\n/g, ';\\n')\n            .replace(/\\n\\n/g, '\\n');\n        let lines = captured.split('\\n');\n        lines = indent(lines);\n        return lines.join('\\n');\n    }\n    // @ts-ignore\n    const extract = (videoUrl_1, ...args_1) => __awaiter(this, [videoUrl_1, ...args_1], void 0, function* (videoUrl, referer = 'https://animepahe.si/') {\n        const extractedData = {\n            // subtitles: [],\n            // intro: { start: 0, end: 0 },\n            // outro: { start: 0, end: 0 },\n            sources: [],\n        };\n        try {\n            const response = yield fetch(`${videoUrl.href}`, {\n                headers: {\n                    'Referer': referer,\n                    'User-Agent': USER_AGENT,\n                },\n            });\n            const data = yield response.text();\n            const unpackedSourceCode = unPack(data.match(/<script\\b[^>]*>\\s*(eval\\([\\s\\S]*?\\))\\s*<\\/script>/i)[1]);\n            const re = /https?:\\/\\/[^'\"\\s]+?\\.m3u8(?:\\?[^'\"\\s]*)?/i;\n            const source = unpackedSourceCode.match(re)[0];\n            extractedData.sources.push({\n                url: source,\n                isM3U8: source.includes('.m3u8'),\n            });\n            return extractedData;\n        }\n        catch (err) {\n            throw new Error(err.message);\n        }\n    });\n    return {\n        serverName,\n        sources,\n        extract,\n    };\n}\n//# sourceMappingURL=kwik.js.map";

export default testCodeString;

// CommonJS compatibility
module.exports = { testCodeString };
