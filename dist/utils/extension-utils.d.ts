import { AsianLoad, Filemoon, GogoCDN, MixDrop, Mp4Player, Mp4Upload, RapidCloud, StreamHub, StreamLare, StreamSB, StreamTape, StreamWish, VidMoly, VizCloud, VidHide, Voe } from '../extractors';
import type { ExtractorContext } from '../models';
export declare const defaultAxios: import("axios").AxiosInstance;
export declare const defaultExtractorContext: ExtractorContext;
export declare const defaultExtractors: {
    AsianLoad: typeof AsianLoad;
    Filemoon: typeof Filemoon;
    GogoCDN: typeof GogoCDN;
    Kwik: (ctx: ExtractorContext) => import("../models").IVideoExtractor;
    MixDrop: typeof MixDrop;
    Mp4Player: typeof Mp4Player;
    Mp4Upload: typeof Mp4Upload;
    RapidCloud: typeof RapidCloud;
    MegaCloud: (ctx: ExtractorContext) => import("../models").IVideoExtractor;
    StreamHub: typeof StreamHub;
    StreamLare: typeof StreamLare;
    StreamSB: typeof StreamSB;
    StreamTape: typeof StreamTape;
    StreamWish: typeof StreamWish;
    VidMoly: typeof VidMoly;
    VizCloud: typeof VizCloud;
    VidHide: typeof VidHide;
    Voe: typeof Voe;
    MegaUp: (ctx?: ExtractorContext) => import("../models").IVideoExtractor;
};
export declare const extractors: {
    GogoCDN: typeof GogoCDN;
    StreamSB: typeof StreamSB;
    StreamTape: typeof StreamTape;
    MixDrop: typeof MixDrop;
    Kwik: (ctx: ExtractorContext) => import("../models").IVideoExtractor;
    RapidCloud: typeof RapidCloud;
    StreamWish: typeof StreamWish;
    Filemoon: typeof Filemoon;
    Voe: typeof Voe;
    AsianLoad: typeof AsianLoad;
    StreamLare: typeof StreamLare;
    VidMoly: typeof VidMoly;
    MegaCloud: (ctx: ExtractorContext) => import("../models").IVideoExtractor;
};
export type Extractor = keyof typeof extractors;
//# sourceMappingURL=extension-utils.d.ts.map